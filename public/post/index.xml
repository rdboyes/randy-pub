<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Randy Boyes</title>
    <link>http://www.randy.pub/post/</link>
      <atom:link href="http://www.randy.pub/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language>
    <image>
      <url>http://www.randy.pub/images/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_2.png</url>
      <title>Posts</title>
      <link>http://www.randy.pub/post/</link>
    </image>
    
    <item>
      <title>Day 1</title>
      <link>http://www.randy.pub/post/advent-2022-day-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://www.randy.pub/post/advent-2022-day-1/</guid>
      <description>&lt;h1 id=&#34;problem&#34;&gt;Problem&lt;/h1&gt;
&lt;p&gt;Given a txt file consisting of one column of integers with missing rows indicating the start of a new individual, find:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The individual with the highest sum&lt;/li&gt;
&lt;li&gt;The three individuals with the highest sum&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h1&gt;
&lt;p&gt;This was a relatively straightforward problem in R. Using &lt;code&gt;cumsum&lt;/code&gt; on missing values to create an index is an idiom that comes up a lot in Advent problems.&lt;/p&gt;
&lt;p&gt;Translating to Julia, I had a couple of minor issues.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Forgot that &lt;code&gt;ismissing&lt;/code&gt; would need to be broadcast, which ruined my groups in Julia for a bit.&lt;/li&gt;
&lt;li&gt;I tried a couple of suggestions that didn&amp;rsquo;t work correctly for me before finding the &lt;code&gt;* -1&lt;/code&gt; strategy for a descending sort in &lt;code&gt;@orderby&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the plus side,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;@aside&lt;/code&gt; macro is a really nice feature when you want two outputs.&lt;/li&gt;
&lt;li&gt;As expected, the Julia version is way faster!&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;code&#34;&gt;Code&lt;/h1&gt;
&lt;div class=&#34;columns&#34;&gt;
&lt;div class=&#34;column&#34; width=&#34;49%&#34;&gt;
&lt;h1 id=&#34;r&#34;&gt;R&lt;/h1&gt;
&lt;p&gt;Load the data into a &lt;code&gt;tibble&lt;/code&gt; using the &lt;code&gt;tidyverse&lt;/code&gt; packages.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidyverse)

df &amp;lt;- tibble(
  num = as.numeric(
    read_lines(&amp;quot;data/1.txt&amp;quot;)
  )
) 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;column&#34; width=&#34;2%&#34;&gt;
&lt;!-- empty column to create gap --&gt;
&lt;/div&gt;
&lt;div class=&#34;column&#34; width=&#34;49%&#34;&gt;
&lt;h1 id=&#34;julia&#34;&gt;Julia&lt;/h1&gt;
&lt;p&gt;Load the data into a &lt;code&gt;DataFrame&lt;/code&gt; using &lt;code&gt;CSV&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;using DelimitedFiles, CSV
using DataFrames, DataFramesMeta

df = CSV.read(
    &amp;quot;data/1.txt&amp;quot;, 
    DataFrame, 
    ignoreemptyrows = false,
    header = [&amp;quot;x1&amp;quot;]
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;columns&#34;&gt;
&lt;div class=&#34;column&#34; width=&#34;49%&#34;&gt;
&lt;p&gt;Group the individuals by adding a cumulative sum of missing values, then sum within groups.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;solve_day &amp;lt;- function(df){
  prep &amp;lt;- df |&amp;gt;
    mutate(id = cumsum(is.na(num))) |&amp;gt;
    group_by(id) |&amp;gt;
    summarize(total_cal = sum(num, na.rm = TRUE)) |&amp;gt;
    arrange(desc(total_cal))

  p1 &amp;lt;- slice(prep, 1) |&amp;gt; pull(total_cal)
  p2 &amp;lt;- slice(prep, 1:3) |&amp;gt; pull(total_cal) |&amp;gt; sum()

  return(c(p1, p2))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;column&#34; width=&#34;2%&#34;&gt;
&lt;!-- empty column to create gap --&gt;
&lt;/div&gt;
&lt;div class=&#34;column&#34; width=&#34;49%&#34;&gt;
&lt;p&gt;Group the individuals by adding a cumulative sum of missing values, then sum within groups.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;function solve_day(df)
  p2 = @chain df begin
    @transform :id = cumsum(ismissing.(:x1))
    groupby(:id)
    @combine :total_cal = sum(skipmissing(:x1))
    @aside p1 = maximum(_.total_cal)
    @orderby(:total_cal * -1)
    sum(_.total_cal[1:3])
  end
  return([p1, p2])
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;columns&#34;&gt;
&lt;div class=&#34;column&#34; width=&#34;49%&#34;&gt;
&lt;p&gt;Run our &lt;code&gt;solve_day&lt;/code&gt; function to get our solution:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;solve_day(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1]  74711 209481
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;column&#34; width=&#34;2%&#34;&gt;
&lt;!-- empty column to create gap --&gt;
&lt;/div&gt;
&lt;div class=&#34;column&#34; width=&#34;49%&#34;&gt;
&lt;p&gt;Run our &lt;code&gt;solve_day&lt;/code&gt; function to get our solution:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;solve_day(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2-element Vector{Int64}:
  74711
 209481
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;columns&#34;&gt;
&lt;div class=&#34;column&#34; width=&#34;49%&#34;&gt;
&lt;p&gt;Run benchmark using &lt;code&gt;bench::mark()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;select(bench::mark(solve_day(df)), median, mem_alloc)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# A tibble: 1 × 2
    median mem_alloc
  &amp;lt;bch:tm&amp;gt; &amp;lt;bch:byt&amp;gt;
1   11.6ms     192KB
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;column&#34; width=&#34;2%&#34;&gt;
&lt;!-- empty column to create gap --&gt;
&lt;/div&gt;
&lt;div class=&#34;column&#34; width=&#34;49%&#34;&gt;
&lt;p&gt;Run benchmark using &lt;code&gt;BenchmarkTools&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;using BenchmarkTools
median(@benchmark solve_day(df))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;BenchmarkTools.TrialEstimate: 
  time:             197.050 μs
  gctime:           0.000 ns (0.00%)
  memory:           107.63 KiB
  allocs:           613
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
